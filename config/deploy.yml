# Name of your application. Used to uniquely configure containers.
service: velotrain

# Name of the container image.
image: clementf/velotrain

# Deploy to these servers.
servers:
  web:
    hosts:
      - 212.47.232.51
    options:
      "add-host": host.docker.internal:host-gateway
    labels:
      traefik.http.routers.kasai.entrypoints: websecure
      traefik.http.routers.kasai.rule: Host(`next.velotrain.fr`)
      traefik.http.routers.kasai.tls.certresolver: letsencrypt

traefik:
  options:
    publish:
      - 443:443
    volume:
      - "/letsencrypt/acme.json:/letsencrypt/acme.json"
  args:
    entryPoints.web.address: ":80"
    entryPoints.websecure.address: ":443"
    entryPoints.web.http.redirections.entryPoint.to: websecure
    entryPoints.web.http.redirections.entryPoint.scheme: https
    entryPoints.web.http.redirections.entrypoint.permanent: true
    certificatesResolvers.letsencrypt.acme.email: "clement.ferey@gmail.com"
    certificatesResolvers.letsencrypt.acme.storage: "/letsencrypt/acme.json"
    certificatesResolvers.letsencrypt.acme.httpchallenge: true
    certificatesResolvers.letsencrypt.acme.httpchallenge.entrypoint: web

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  server: rg.fr-par.scw.cloud
  username: clementf

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

builder:
  local:
    arch: amd64
    host: unix:///Users/<%= `whoami`.strip %>/.docker/run/docker.sock

# Inject ENV variables into containers (secrets come from .env).
# Remember to run `kamal env push` after making changes!
env:
  clear:
    PORT: 3000
  secret:
    - POSTGRES_PASSWORD
    - DATABASE_URL
    - SECRET_KEY_BASE

accessories:
  pg:
    image: postgis/postgis:14-3.4
    host: 212.47.232.51
    port: 5432
    env:
      clear:
        POSTGRES_USER: 'velotrain'
        POSTGRES_DB: 'velotrain_production'
      secret:
        - POSTGRES_PASSWORD
    directories:
      - data:/var/lib/postgresql/data


# Use a different ssh user than root
# ssh:
#   user: app

# Configure builder setup.
# builder:
#   args:
#     RUBY_VERSION: 3.2.0
#   secrets:
#     - GITHUB_TOKEN
#   remote:
#     arch: amd64
#     host: ssh://app@192.168.0.1

# Use accessory services (secrets come from .env).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data

# Configure custom arguments for Traefik


# Configure a custom healthcheck (default is /up on port 3000)
healthcheck:
  path: /up
  port: 3000
  max_attempts: 7
  interval: 4s

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
# asset_path: /rails/public/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

